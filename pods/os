#!/usr/bin/env python

from functools import partial
from itertools import imap, ifilter, izip_longest
from operator import itemgetter, methodcaller
import os
import platform
import re
try:
    import simplejson as json
except ImportError:
    import json
import socket
import subprocess

SYSTEM = platform.system()
pod = {}

def linux_get_meminfo():
    with open('/proc/meminfo') as fh:
        return dict([line.strip().replace(":", "").split()[:2] for line in fh])

def record_to_disk(record):
    return {'osname': record[3],
            'size': int(record[2]) * 1024}

def linux_get_diskinfo():
    with open('/proc/partitions') as fh:
        return list(imap(record_to_disk,
                         ifilter(lambda r: re.match('^[hs]d[a-z][0-9]?$', r[3]),
                                 ifilter(lambda r: r[0].isdigit(),
                                         imap(methodcaller('split'),
                                              ifilter(None,
                                                      fh.read().split("\n")))))))

def grouper(n, iterable, fillvalue=None):
    "grouper(3, 'ABCDEFG', 'x') --> ABC DEF Gxx"
    args = [iter(iterable)] * n
    return izip_longest(fillvalue=fillvalue, *args)

def record_to_cpu(record):
    return dict(imap(methodcaller('split', ':'),
                     imap(methodcaller('strip'),
                          imap(methodcaller('replace', '\t', ''),
                               record))))

def linux_get_cpuinfo():
    with open('/proc/cpuinfo') as fh:
        cpuinfo = fh.readlines()
        return list(imap(record_to_cpu,
                         grouper(cpuinfo.index('\n'),
                                 ifilter(lambda l: l != "\n",
                                         cpuinfo))))

def linux_get_kernel_release():
    return subprocess.Popen(['/bin/uname', '-r'], stdout=subprocess.PIPE).communicate()[0].strip()

if __name__ == '__main__':
    if SYSTEM == 'Linux':
        if platform.linux_distribution()[0] == 'Debian':
            with open('/etc/debian_version') as fh:
                pod["operatingsystemrelease"] = fh.readline().strip()
        if platform.linux_distribution()[0] == 'Ubuntu':
            with open('/etc/issue') as fh:
                release = fh.readline()
            matcher = re.compile(r'Ubuntu (\d+\.\d+)')
            pod["operatingsystemrelease"] = matcher.search(release).group(1).strip()
        try:
            pod["memory"] = linux_get_meminfo()
        except:
            pass
        try:
            pod["disks"] = linux_get_diskinfo()
        except:
            pass
        try:
            pod["cpu"] = linux_get_cpuinfo()
        except:
            pass

        pod['kernelrelease'] = linux_get_kernel_release()

    if SYSTEM == 'Darwin':
        pod["operatingsystemrelease"] = platform.release().strip()

    pod["architecture"] = platform.architecture()
    pod["fqdn"] = socket.getfqdn()
    if "." in pod["fqdn"]:
        pod["domain"] = ".".join(pod["fqdn"].split(".")[1:])
        pod["hostname"] = pod["fqdn"].split(".")[0]
    else:
        pod["hostname"] = pod["fqdn"]
        pod["operatingsystem"] = SYSTEM

    print json.dumps(pod, sort_keys=True, indent=4)
